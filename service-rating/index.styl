load(data)

duration = 400ms
elastic = cubic-bezier(0.175, 0.885, 0.320, 1.275)

#container
	width 600px
	min-height 400px
	text-align center

	svg#smiley
		fill transparent

		path
			transition d duration elastic
			stroke inherit

		#head, #face
			pointer-events none
			stroke #2A2A2A

		#head
			stroke-width 4
			fill #CCC
		
		#face
			stroke-width 2.5
			stroke-linecap round
		
		#eye
			transition opacity (duration/2) ease-out
			
	svg#slider		
		fill transparent

		use.animate[href="#star"]
			--an-sparkle: sparkle
			--an-star: star

		#star
			path
				animation-delay var(--delay)
				animation-duration duration * 2
				animation-iteration-count 1
				stroke gold

			path.outline
				d 'path(%s)' % paths.star
				stroke-linecap round
				stroke-linejoin round
				transition fill (duration/2) linear
				animation-name var(--an-star)
				animation-timing-function elastic
				
			path.sparkle
				d 'path(%s)' % paths.sparkle
				stroke-linecap round
				stroke-dasharray 0 9 0 2
				stroke-dashoffset 1
				animation-name var(--an-sparkle)
				animation-timing-function linear
		
	&[data-rating="5"]  #smiley
		#eye
			opacity 0
	
	// TODO refactor to emit native nesting
	for i in (0..4)
		&[data-rating={'"%s"' % (i + 1)}]
			#smiley
				#eyebrow
					d 'path(%s)' % paths.eyebrow[i]
				#clip-eye path
					d 'path(%s)' % join(' ', paths.eyebrow[i], paths.eyebox)
				#mouth
					d 'path(%s)' % paths.mouth[i]
			#slider
				path.sparkle
					stroke red
				use:nth-of-type(-n+{i + 1})
					fill gold !important
		#slider
			use:nth-of-type({i + 1})
				--delay: (duration/6) * i

		
@keyframes sparkle
	from
		stroke-dasharray 0 0 0 9
	20%
		stroke-dasharray 0 2 5 2
	40%
		stroke-dasharray 0 4 4 2
	60%
		stroke-dasharray 0 9 0 2
	to
		stroke-dasharray 0 9 0 2
